version: '3.8'

services:
  frontend:
    image: node:18               
    working_dir: /usr/src/app
    volumes:
      - ./frontend:/usr/src/app   
    command: >
      sh -c "npm install && npm install -g vite && npm run build && npm install -g serve && serve -s dist"
    ports:
      - "3000:3000"  
    environment:
      - NODE_ENV=production

  backend:
    image: python:latest  # Используем базовое изображение Python
    working_dir: /app
    volumes:
      - ./backend:/app  # Копируем контент из папки backend
      - ./servicedb:/app/servicedb  # Копируем контент из servicedb
    ports:
      - "8000:8000"
    depends_on:
      - servicedb
      - rabbitmq
    command: >
      sh -c "pip install --no-cache-dir -r requirements.txt && python -m apps"

  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5672:5672"          
      - "15672:15672"       
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/enable_plugins.sh:/docker-entrypoint-initdb.d/enable_plugins.sh 

  servicedb:
    build:
      context: ./servicedb
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5



  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/create_table.sql:/docker-entrypoint-initdb.d/create_table.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: dora@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: 1234qwer/.,M
  #   ports:
  #     - "5050:80" 
  #   depends_on:
  #     - db 
  #   restart: always
volumes:
  db_data:
